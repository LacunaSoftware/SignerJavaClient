/*
 * Dropsigner (HML)
 * <!--------------------------------------------------------------------------------------------------------------------->    <h2>Authentication</h2>    <p>   In order to call this APIs, you will need an <strong>API key</strong>. Set the API key in the header <span class=\"code\">X-Api-Key</span>:  </p>    <pre>X-Api-Key: your-app|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</pre>    <!--------------------------------------------------------------------------------------------------------------------->  <br />    <h2>HTTP Codes</h2>    <p>   The APIs will return the following HTTP codes:  </p>    <table>   <thead>    <tr>     <th>Code</th>     <th>Description</th>    </tr>   </thead>   <tbody>    <tr>     <td><strong class=\"model-title\">200 (OK)</strong></td>     <td>Request processed successfully. The response is different for each API, please refer to the operation's documentation</td>    </tr>    <tr>     <td><strong class=\"model-title\">400 (Bad Request)</strong></td>     <td>Syntax error. For instance, when a required field was not provided</td>    </tr>    <tr>     <td><strong class=\"model-title\">401 (Unauthorized)</strong></td>     <td>API key not provided or invalid</td>    </tr>    <tr>     <td><strong class=\"model-title\">403 (Forbidden)</strong></td>     <td>API key is valid, but the application has insufficient permissions to complete the requested operation</td>    </tr>    <tr>     <td><strong class=\"model-title\">422 (Unprocessable Entity)</strong></td>     <td>API error. The response is as defined in <a href=\"#model-ErrorModel\">ErrorModel</a></td>    </tr>   </tbody>  </table>    <br />    <h3>Error Codes</h3>    <p>Some of the error codes returned in a 422 response are provided bellow*:</p>    <ul>   <li>CertificateNotFound</li>   <li>DocumentNotFound</li>   <li>FolderNotFound</li>   <li>CpfMismatch</li>   <li>CpfNotExpected</li>   <li>InvalidFlowAction</li>   <li>DocumentInvalidKey</li>  </ul>    <p style=\"font-size: 0.9em\">   *The codes shown above are the main error codes. Nonetheless, this list is not comprehensive. New codes may be added anytime without previous warning.  </p>    <!--------------------------------------------------------------------------------------------------------------------->    <br />    <h2>Webhooks</h2>    <p>   It is recomended to subscribe to Webhook events <strong>instead</strong> of polling APIs. To do so, enable webhooks and register an URL that will receive a POST request   whenever one of the events bellow occur.  </p>  <p>   All requests have the format described in <a href=\"#model-Webhooks.WebhookModel\">Webhooks.WebhookModel</a>.   The data field varies according to the webhook event type:  </p>      <table>   <thead>    <tr>     <th>Event type</th>     <th>Description</th>     <th>Payload</th>    </tr>   </thead>   <tbody>    <tr>     <td><strong class=\"model-title\">DocumentSigned</strong></td>     <td>Triggered when a document is signed.</td>     <td><a href=\"#model-Webhooks.DocumentSignedModel\">Webhooks.DocumentSignedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentApproved</strong></td>     <td>Triggered when a document is approved.</td>     <td><a href=\"#model-Webhooks.DocumentApprovedModel\">Webhooks.DocumentApprovedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentRefused</strong></td>     <td>Triggered when a document is refused.</td>     <td><a href=\"#model-Webhooks.DocumentRefusedModel\">Webhooks.DocumentRefusedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentConcluded</strong></td>     <td>Triggered when the flow of a document is concluded.</td>     <td><a href=\"#model-Webhooks.DocumentConcludedModel\">Webhooks.DocumentConcludedModel</a></td>    </tr>   </tbody>  </table>    <p>   To register your application URL and enable Webhooks, access the integrations section in your <a href=\"/private/organizations\" target=\"_blank\">organization's details page</a>.  </p>  
 *
 * OpenAPI spec version: 1.24.3
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.lacunasoftware.signer.flowactions;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.lacunasoftware.signer.documentmark.PrePositionedDocumentMarkModel;
import com.lacunasoftware.signer.FlowActionType;
import com.lacunasoftware.signer.flowactions.XadesOptionsModel;
import com.lacunasoftware.signer.users.ParticipantUserModel;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * FlowActionCreateModel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2021-02-02T15:43:05.773-03:00[America/Sao_Paulo]")
public class FlowActionCreateModel {
  @SerializedName("type")
  private FlowActionType type = null;

  @SerializedName("step")
  private Integer step = null;

  @SerializedName("user")
  private ParticipantUserModel user = null;

  @SerializedName("numberRequiredSignatures")
  private Integer numberRequiredSignatures = null;

  @SerializedName("ruleName")
  private String ruleName = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("signRuleUsers")
  private List<ParticipantUserModel> signRuleUsers = null;

  @SerializedName("prePositionedMarks")
  private List<PrePositionedDocumentMarkModel> prePositionedMarks = null;

  @SerializedName("allowElectronicSignature")
  private Boolean allowElectronicSignature = null;

  @SerializedName("requireSmsAuthenticationToSignElectronically")
  private Boolean requireSmsAuthenticationToSignElectronically = null;

  @SerializedName("requireAuthenticatorAppToSignElectronically")
  private Boolean requireAuthenticatorAppToSignElectronically = null;

  @SerializedName("requireSelfieAuthenticationToSignElectronically")
  private Boolean requireSelfieAuthenticationToSignElectronically = null;

  @SerializedName("xadesOptions")
  private XadesOptionsModel xadesOptions = null;

  public FlowActionCreateModel type(FlowActionType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @Schema(description = "")
  public FlowActionType getType() {
    return type;
  }

  public void setType(FlowActionType type) {
    this.type = type;
  }

  public FlowActionCreateModel step(Integer step) {
    this.step = step;
    return this;
  }

   /**
   * The order in which this action should take place.
   * @return step
  **/
  @Schema(description = "The order in which this action should take place.")
  public Integer getStep() {
    return step;
  }

  public void setStep(Integer step) {
    this.step = step;
  }

  public FlowActionCreateModel user(ParticipantUserModel user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @Schema(description = "")
  public ParticipantUserModel getUser() {
    return user;
  }

  public void setUser(ParticipantUserModel user) {
    this.user = user;
  }

  public FlowActionCreateModel numberRequiredSignatures(Integer numberRequiredSignatures) {
    this.numberRequiredSignatures = numberRequiredSignatures;
    return this;
  }

   /**
   * Number of required signatures (if type is SignRule)
   * @return numberRequiredSignatures
  **/
  @Schema(description = "Number of required signatures (if type is SignRule)")
  public Integer getNumberRequiredSignatures() {
    return numberRequiredSignatures;
  }

  public void setNumberRequiredSignatures(Integer numberRequiredSignatures) {
    this.numberRequiredSignatures = numberRequiredSignatures;
  }

  public FlowActionCreateModel ruleName(String ruleName) {
    this.ruleName = ruleName;
    return this;
  }

   /**
   * Name of the rule (if type is SignRule)
   * @return ruleName
  **/
  @Schema(description = "Name of the rule (if type is SignRule)")
  public String getRuleName() {
    return ruleName;
  }

  public void setRuleName(String ruleName) {
    this.ruleName = ruleName;
  }

  public FlowActionCreateModel title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Title of the participant
   * @return title
  **/
  @Schema(description = "Title of the participant")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  public FlowActionCreateModel signRuleUsers(List<ParticipantUserModel> signRuleUsers) {
    this.signRuleUsers = signRuleUsers;
    return this;
  }

  public FlowActionCreateModel addSignRuleUsersItem(ParticipantUserModel signRuleUsersItem) {
    if (this.signRuleUsers == null) {
      this.signRuleUsers = new ArrayList<ParticipantUserModel>();
    }
    this.signRuleUsers.add(signRuleUsersItem);
    return this;
  }

   /**
   * Get signRuleUsers
   * @return signRuleUsers
  **/
  @Schema(description = "")
  public List<ParticipantUserModel> getSignRuleUsers() {
    return signRuleUsers;
  }

  public void setSignRuleUsers(List<ParticipantUserModel> signRuleUsers) {
    this.signRuleUsers = signRuleUsers;
  }

  public FlowActionCreateModel prePositionedMarks(List<PrePositionedDocumentMarkModel> prePositionedMarks) {
    this.prePositionedMarks = prePositionedMarks;
    return this;
  }

  public FlowActionCreateModel addPrePositionedMarksItem(PrePositionedDocumentMarkModel prePositionedMarksItem) {
    if (this.prePositionedMarks == null) {
      this.prePositionedMarks = new ArrayList<PrePositionedDocumentMarkModel>();
    }
    this.prePositionedMarks.add(prePositionedMarksItem);
    return this;
  }

   /**
   * Get prePositionedMarks
   * @return prePositionedMarks
  **/
  @Schema(description = "")
  public List<PrePositionedDocumentMarkModel> getPrePositionedMarks() {
    return prePositionedMarks;
  }

  public void setPrePositionedMarks(List<PrePositionedDocumentMarkModel> prePositionedMarks) {
    this.prePositionedMarks = prePositionedMarks;
  }

  public FlowActionCreateModel allowElectronicSignature(Boolean allowElectronicSignature) {
    this.allowElectronicSignature = allowElectronicSignature;
    return this;
  }

   /**
   * Set to true if the electronic signature option should be available. (only if the type of the action is Signer or SignRule)
   * @return allowElectronicSignature
  **/
  @Schema(description = "Set to true if the electronic signature option should be available. (only if the type of the action is Signer or SignRule)")
  public Boolean isAllowElectronicSignature() {
    return allowElectronicSignature;
  }

  public void setAllowElectronicSignature(Boolean allowElectronicSignature) {
    this.allowElectronicSignature = allowElectronicSignature;
  }

  public FlowActionCreateModel requireSmsAuthenticationToSignElectronically(Boolean requireSmsAuthenticationToSignElectronically) {
    this.requireSmsAuthenticationToSignElectronically = requireSmsAuthenticationToSignElectronically;
    return this;
  }

   /**
   * Requires the user to confirm a code sent to his phone to sign electronically. (If Lacuna.Signer.Api.FlowActions.FlowActionCreateModel.AllowElectronicSignature is true)
   * @return requireSmsAuthenticationToSignElectronically
  **/
  @Schema(description = "Requires the user to confirm a code sent to his phone to sign electronically. (If Lacuna.Signer.Api.FlowActions.FlowActionCreateModel.AllowElectronicSignature is true)")
  public Boolean isRequireSmsAuthenticationToSignElectronically() {
    return requireSmsAuthenticationToSignElectronically;
  }

  public void setRequireSmsAuthenticationToSignElectronically(Boolean requireSmsAuthenticationToSignElectronically) {
    this.requireSmsAuthenticationToSignElectronically = requireSmsAuthenticationToSignElectronically;
  }

  public FlowActionCreateModel requireAuthenticatorAppToSignElectronically(Boolean requireAuthenticatorAppToSignElectronically) {
    this.requireAuthenticatorAppToSignElectronically = requireAuthenticatorAppToSignElectronically;
    return this;
  }

   /**
   * Requires the user to enter a one-time password (OTP) to sign electronically. (If Lacuna.Signer.Api.FlowActions.FlowActionCreateModel.AllowElectronicSignature is true)
   * @return requireAuthenticatorAppToSignElectronically
  **/
  @Schema(description = "Requires the user to enter a one-time password (OTP) to sign electronically. (If Lacuna.Signer.Api.FlowActions.FlowActionCreateModel.AllowElectronicSignature is true)")
  public Boolean isRequireAuthenticatorAppToSignElectronically() {
    return requireAuthenticatorAppToSignElectronically;
  }

  public void setRequireAuthenticatorAppToSignElectronically(Boolean requireAuthenticatorAppToSignElectronically) {
    this.requireAuthenticatorAppToSignElectronically = requireAuthenticatorAppToSignElectronically;
  }

  public FlowActionCreateModel requireSelfieAuthenticationToSignElectronically(Boolean requireSelfieAuthenticationToSignElectronically) {
    this.requireSelfieAuthenticationToSignElectronically = requireSelfieAuthenticationToSignElectronically;
    return this;
  }

   /**
   * Requires the user to take a selfie to sign electronically. (If Lacuna.Signer.Api.FlowActions.FlowActionCreateModel.AllowElectronicSignature is true)
   * @return requireSelfieAuthenticationToSignElectronically
  **/
  @Schema(description = "Requires the user to take a selfie to sign electronically. (If Lacuna.Signer.Api.FlowActions.FlowActionCreateModel.AllowElectronicSignature is true)")
  public Boolean isRequireSelfieAuthenticationToSignElectronically() {
    return requireSelfieAuthenticationToSignElectronically;
  }

  public void setRequireSelfieAuthenticationToSignElectronically(Boolean requireSelfieAuthenticationToSignElectronically) {
    this.requireSelfieAuthenticationToSignElectronically = requireSelfieAuthenticationToSignElectronically;
  }

  public FlowActionCreateModel xadesOptions(XadesOptionsModel xadesOptions) {
    this.xadesOptions = xadesOptions;
    return this;
  }

   /**
   * Get xadesOptions
   * @return xadesOptions
  **/
  @Schema(description = "")
  public XadesOptionsModel getXadesOptions() {
    return xadesOptions;
  }

  public void setXadesOptions(XadesOptionsModel xadesOptions) {
    this.xadesOptions = xadesOptions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowActionCreateModel flowActionsFlowActionCreateModel = (FlowActionCreateModel) o;
    return Objects.equals(this.type, flowActionsFlowActionCreateModel.type) &&
        Objects.equals(this.step, flowActionsFlowActionCreateModel.step) &&
        Objects.equals(this.user, flowActionsFlowActionCreateModel.user) &&
        Objects.equals(this.numberRequiredSignatures, flowActionsFlowActionCreateModel.numberRequiredSignatures) &&
        Objects.equals(this.ruleName, flowActionsFlowActionCreateModel.ruleName) &&
        Objects.equals(this.title, flowActionsFlowActionCreateModel.title) &&
        Objects.equals(this.signRuleUsers, flowActionsFlowActionCreateModel.signRuleUsers) &&
        Objects.equals(this.prePositionedMarks, flowActionsFlowActionCreateModel.prePositionedMarks) &&
        Objects.equals(this.allowElectronicSignature, flowActionsFlowActionCreateModel.allowElectronicSignature) &&
        Objects.equals(this.requireSmsAuthenticationToSignElectronically, flowActionsFlowActionCreateModel.requireSmsAuthenticationToSignElectronically) &&
        Objects.equals(this.requireAuthenticatorAppToSignElectronically, flowActionsFlowActionCreateModel.requireAuthenticatorAppToSignElectronically) &&
        Objects.equals(this.requireSelfieAuthenticationToSignElectronically, flowActionsFlowActionCreateModel.requireSelfieAuthenticationToSignElectronically) &&
        Objects.equals(this.xadesOptions, flowActionsFlowActionCreateModel.xadesOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, step, user, numberRequiredSignatures, ruleName, title, signRuleUsers, prePositionedMarks, allowElectronicSignature, requireSmsAuthenticationToSignElectronically, requireAuthenticatorAppToSignElectronically, requireSelfieAuthenticationToSignElectronically, xadesOptions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowActionCreateModel {\n");
    
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    step: ").append(toIndentedString(step)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    numberRequiredSignatures: ").append(toIndentedString(numberRequiredSignatures)).append("\n");
    sb.append("    ruleName: ").append(toIndentedString(ruleName)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    signRuleUsers: ").append(toIndentedString(signRuleUsers)).append("\n");
    sb.append("    prePositionedMarks: ").append(toIndentedString(prePositionedMarks)).append("\n");
    sb.append("    allowElectronicSignature: ").append(toIndentedString(allowElectronicSignature)).append("\n");
    sb.append("    requireSmsAuthenticationToSignElectronically: ").append(toIndentedString(requireSmsAuthenticationToSignElectronically)).append("\n");
    sb.append("    requireAuthenticatorAppToSignElectronically: ").append(toIndentedString(requireAuthenticatorAppToSignElectronically)).append("\n");
    sb.append("    requireSelfieAuthenticationToSignElectronically: ").append(toIndentedString(requireSelfieAuthenticationToSignElectronically)).append("\n");
    sb.append("    xadesOptions: ").append(toIndentedString(xadesOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
