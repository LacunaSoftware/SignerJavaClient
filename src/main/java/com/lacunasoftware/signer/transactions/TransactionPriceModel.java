/*
 * Dropsigner (HML)
 * <!--------------------------------------------------------------------------------------------------------------------->    <h2>Authentication</h2>    <p>   In order to call this APIs, you will need an <strong>API key</strong>. Set the API key in the header <span class=\"code\">X-Api-Key</span>:  </p>    <pre>X-Api-Key: your-app|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</pre>    <!--------------------------------------------------------------------------------------------------------------------->  <br />    <h2>HTTP Codes</h2>    <p>   The APIs will return the following HTTP codes:  </p>    <table>   <thead>    <tr>     <th>Code</th>     <th>Description</th>    </tr>   </thead>   <tbody>    <tr>     <td><strong class=\"model-title\">200 (OK)</strong></td>     <td>Request processed successfully. The response is different for each API, please refer to the operation's documentation</td>    </tr>    <tr>     <td><strong class=\"model-title\">400 (Bad Request)</strong></td>     <td>Syntax error. For instance, when a required field was not provided</td>    </tr>    <tr>     <td><strong class=\"model-title\">401 (Unauthorized)</strong></td>     <td>API key not provided or invalid</td>    </tr>    <tr>     <td><strong class=\"model-title\">403 (Forbidden)</strong></td>     <td>API key is valid, but the application has insufficient permissions to complete the requested operation</td>    </tr>    <tr>     <td><strong class=\"model-title\">422 (Unprocessable Entity)</strong></td>     <td>API error. The response is as defined in <a href=\"#model-ErrorModel\">ErrorModel</a></td>    </tr>   </tbody>  </table>    <br />    <h3>Error Codes</h3>    <p>Some of the error codes returned in a 422 response are provided bellow*:</p>    <ul>   <li>CertificateNotFound</li>   <li>DocumentNotFound</li>   <li>FolderNotFound</li>   <li>CpfMismatch</li>   <li>CpfNotExpected</li>   <li>InvalidFlowAction</li>   <li>DocumentInvalidKey</li>  </ul>    <p style=\"font-size: 0.9em\">   *The codes shown above are the main error codes. Nonetheless, this list is not comprehensive. New codes may be added anytime without previous warning.  </p>    <!--------------------------------------------------------------------------------------------------------------------->    <br />    <h2>Webhooks</h2>    <p>   It is recomended to subscribe to Webhook events <strong>instead</strong> of polling APIs. To do so, enable webhooks and register an URL that will receive a POST request   whenever one of the events bellow occur.  </p>  <p>   All requests have the format described in <a href=\"#model-Webhooks.WebhookModel\">Webhooks.WebhookModel</a>.   The data field varies according to the webhook event type:  </p>      <table>   <thead>    <tr>     <th>Event type</th>     <th>Description</th>     <th>Payload</th>    </tr>   </thead>   <tbody>    <tr>     <td><strong class=\"model-title\">DocumentSigned</strong></td>     <td>Triggered when a document is signed.</td>     <td><a href=\"#model-Webhooks.DocumentSignedModel\">Webhooks.DocumentSignedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentApproved</strong></td>     <td>Triggered when a document is approved.</td>     <td><a href=\"#model-Webhooks.DocumentApprovedModel\">Webhooks.DocumentApprovedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentRefused</strong></td>     <td>Triggered when a document is refused.</td>     <td><a href=\"#model-Webhooks.DocumentRefusedModel\">Webhooks.DocumentRefusedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentConcluded</strong></td>     <td>Triggered when the flow of a document is concluded.</td>     <td><a href=\"#model-Webhooks.DocumentConcludedModel\">Webhooks.DocumentConcludedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentCanceled</strong></td>     <td>Triggered when the document is canceled.</td>     <td><a href=\"#model-Webhooks.DocumentCanceledModel\">Webhooks.DocumentCanceledModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentsCreated (v1.50.0)</strong></td>     <td>Triggered when one or more documents are created.</td>     <td><a href=\"#model-Webhooks.DocumentsCreatedModel\">Webhooks.DocumentsCreatedModel</a></td>    </tr>   </tbody>  </table>    <p>   To register your application URL and enable Webhooks, access the integrations section in your <a href=\"/private/organizations\" target=\"_blank\">organization's details page</a>.  </p>  
 *
 * OpenAPI spec version: 1.55.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.lacunasoftware.signer.transactions;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.lacunasoftware.signer.TransactionPricingTypes;
import com.lacunasoftware.signer.TransactionTypes;
import com.lacunasoftware.signer.transactions.PriceRangeModel;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
/**
 * TransactionPriceModel
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-03-15T15:24:02.025-03:00[America/Sao_Paulo]")
public class TransactionPriceModel {
  @JsonProperty("transactionType")
  private TransactionTypes transactionType = null;

  @JsonProperty("pricingType")
  private TransactionPricingTypes pricingType = null;

  @JsonProperty("price")
  private Double price = null;

  @JsonProperty("priceRanges")
  private List<PriceRangeModel> priceRanges = null;

  @JsonProperty("limit")
  private Integer limit = null;

  public TransactionPriceModel transactionType(TransactionTypes transactionType) {
    this.transactionType = transactionType;
    return this;
  }

   /**
   * Get transactionType
   * @return transactionType
  **/
  @Schema(required = true, description = "")
  public TransactionTypes getTransactionType() {
    return transactionType;
  }

  public void setTransactionType(TransactionTypes transactionType) {
    this.transactionType = transactionType;
  }

  public TransactionPriceModel pricingType(TransactionPricingTypes pricingType) {
    this.pricingType = pricingType;
    return this;
  }

   /**
   * Get pricingType
   * @return pricingType
  **/
  @Schema(required = true, description = "")
  public TransactionPricingTypes getPricingType() {
    return pricingType;
  }

  public void setPricingType(TransactionPricingTypes pricingType) {
    this.pricingType = pricingType;
  }

  public TransactionPriceModel price(Double price) {
    this.price = price;
    return this;
  }

   /**
   * Price of the transaction type (if Lacuna.Signer.Api.Transactions.TransactionPriceModel.PricingType is Lacuna.Signer.Api.TransactionPricingTypes.Simple)
   * @return price
  **/
  @Schema(description = "Price of the transaction type (if Lacuna.Signer.Api.Transactions.TransactionPriceModel.PricingType is Lacuna.Signer.Api.TransactionPricingTypes.Simple)")
  public Double getPrice() {
    return price;
  }

  public void setPrice(Double price) {
    this.price = price;
  }

  public TransactionPriceModel priceRanges(List<PriceRangeModel> priceRanges) {
    this.priceRanges = priceRanges;
    return this;
  }

  public TransactionPriceModel addPriceRangesItem(PriceRangeModel priceRangesItem) {
    if (this.priceRanges == null) {
      this.priceRanges = new ArrayList<PriceRangeModel>();
    }
    this.priceRanges.add(priceRangesItem);
    return this;
  }

   /**
   * Price ranges of transaction type (if Lacuna.Signer.Api.Transactions.TransactionPriceModel.PricingType is Lacuna.Signer.Api.TransactionPricingTypes.Range)
   * @return priceRanges
  **/
  @Schema(description = "Price ranges of transaction type (if Lacuna.Signer.Api.Transactions.TransactionPriceModel.PricingType is Lacuna.Signer.Api.TransactionPricingTypes.Range)")
  public List<PriceRangeModel> getPriceRanges() {
    return priceRanges;
  }

  public void setPriceRanges(List<PriceRangeModel> priceRanges) {
    this.priceRanges = priceRanges;
  }

  public TransactionPriceModel limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @Schema(description = "")
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionPriceModel transactionsTransactionPriceModel = (TransactionPriceModel) o;
    return Objects.equals(this.transactionType, transactionsTransactionPriceModel.transactionType) &&
        Objects.equals(this.pricingType, transactionsTransactionPriceModel.pricingType) &&
        Objects.equals(this.price, transactionsTransactionPriceModel.price) &&
        Objects.equals(this.priceRanges, transactionsTransactionPriceModel.priceRanges) &&
        Objects.equals(this.limit, transactionsTransactionPriceModel.limit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionType, pricingType, price, priceRanges, limit);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionPriceModel {\n");
    
    sb.append("    transactionType: ").append(toIndentedString(transactionType)).append("\n");
    sb.append("    pricingType: ").append(toIndentedString(pricingType)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceRanges: ").append(toIndentedString(priceRanges)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
