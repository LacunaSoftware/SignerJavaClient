/*
 * Lacuna.Signer.Site API
 * <!--------------------------------------------------------------------------------------------------------------------->    <h2>Authentication</h2>    <p>   In order to call this APIs, you will need an <strong>API key</strong>. Set the API key in the header <span class=\"code\">X-Api-Key</span>:  </p>    <pre>X-Api-Key: your-app|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</pre>    <!--------------------------------------------------------------------------------------------------------------------->  <br />    <h2>HTTP Codes</h2>    <p>   The APIs will return the following HTTP codes:  </p>    <table>   <thead>    <tr>     <th>Code</th>     <th>Description</th>    </tr>   </thead>   <tbody>    <tr>     <td><strong class=\"model-title\">200 (OK)</strong></td>     <td>Request processed successfully. The response is different for each API, please refer to the operation's documentation</td>    </tr>    <tr>     <td><strong class=\"model-title\">400 (Bad Request)</strong></td>     <td>Syntax error. For instance, when a required field was not provided</td>    </tr>    <tr>     <td><strong class=\"model-title\">401 (Unauthorized)</strong></td>     <td>API key not provided or invalid</td>    </tr>    <tr>     <td><strong class=\"model-title\">403 (Forbidden)</strong></td>     <td>API key is valid, but the application has insufficient permissions to complete the requested operation</td>    </tr>    <tr>     <td><strong class=\"model-title\">422 (Unprocessable Entity)</strong></td>     <td>API error. The response is as defined in <a href=\"#model-Lacuna.Signer.Api.ErrorModel\">Lacuna.Signer.Api.ErrorModel</a></td>    </tr>   </tbody>  </table>    <br />    <h3>Error Codes</h3>    <p>Some of the error codes returned in a 422 response are provided bellow*:</p>    <ul>   <li>CertificateNotFound</li>   <li>DocumentNotFound</li>   <li>FolderNotFound</li>   <li>CpfMismatch</li>   <li>CpfNotExpected</li>   <li>InvalidFlowAction</li>   <li>DocumentInvalidKey</li>  </ul>    <p style=\"font-size: 0.9em\">   *The codes shown above are the main error codes. Nonetheless, this list is not comprehensive. New codes may be added anytime without previous warning.  </p>    <!--------------------------------------------------------------------------------------------------------------------->    <br />    <h2>Webhooks</h2>    <p>   It is recomended to subscribe to Webhook events <strong>instead</strong> of polling APIs. To do so, enable webhooks and register an URL that will receive a POST request   whenever one of the events bellow occur.  </p>  <p>   All requests have the format described in <a href=\"#model-Lacuna.Signer.Api.Webhooks.WebhookModel\">WebhookModel</a>.   The data field varies according to the webhook event type:  </p>      <table>   <thead>    <tr>     <th>Event type</th>     <th>Description</th>     <th>Payload</th>    </tr>   </thead>   <tbody>    <tr>     <td><strong class=\"model-title\">DocumentConcluded</strong></td>     <td>Triggered when the flow of a document is concluded.</td>     <td><a href=\"#model-Lacuna.Signer.Api.Webhooks.DocumentConcludedModel\">DocumentConcludedModel</a></td>    </tr>   </tbody>  </table>    <p>   To register your application URL and enable Webhooks, access the integrations section in your <a href=\"/private/organizations\" target=\"_blank\">organization's details page</a>.  </p>
 *
 * OpenAPI spec version: 0.44.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.lacunasoftware.signer;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.lacunasoftware.signer.LacunaSignerApiFlowActionsFlowActionCreateModel;
import com.lacunasoftware.signer.LacunaSignerApiFlowActionsFlowActionEditModel;
import com.lacunasoftware.signer.LacunaSignerApiObserversObserverCreateModel;
import com.lacunasoftware.signer.LacunaSignerApiObserversObserverEditModel;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

/**
 * LacunaSignerApiDocumentsDocumentFlowEditRequest
 */

class LacunaSignerApiDocumentsDocumentFlowEditRequest {

	@SerializedName("addedFlowActions")
	private List<LacunaSignerApiFlowActionsFlowActionCreateModel> addedFlowActions = null;

	@SerializedName("editedFlowActions")
	private List<LacunaSignerApiFlowActionsFlowActionEditModel> editedFlowActions = null;

	@SerializedName("deletedFlowActionIds")
	private List<UUID> deletedFlowActionIds = null;

	@SerializedName("addedObservers")
	private List<LacunaSignerApiObserversObserverCreateModel> addedObservers = null;

	@SerializedName("editedObservers")
	private List<LacunaSignerApiObserversObserverEditModel> editedObservers = null;

	@SerializedName("deletedObserverIds")
	private List<UUID> deletedObserverIds = null;

	public LacunaSignerApiDocumentsDocumentFlowEditRequest addedFlowActions(List<LacunaSignerApiFlowActionsFlowActionCreateModel> addedFlowActions) {
		this.addedFlowActions = addedFlowActions;
		return this;
	}

	public LacunaSignerApiDocumentsDocumentFlowEditRequest addAddedFlowActionsItem(LacunaSignerApiFlowActionsFlowActionCreateModel addedFlowActionsItem) {
		if (this.addedFlowActions == null) {
			this.addedFlowActions = new ArrayList<LacunaSignerApiFlowActionsFlowActionCreateModel>();
		}
		this.addedFlowActions.add(addedFlowActionsItem);
		return this;
	}

	/**
	 * The actions to be added to the flow.  The Lacuna.Signer.Api.FlowActions.FlowActionCreateModel.Step must be greater or equal to the current pending step.
	 *
	 * @return addedFlowActions
	 **/
	@Schema(description = "The actions to be added to the flow.  The Lacuna.Signer.Api.FlowActions.FlowActionCreateModel.Step must be greater or equal to the current pending step.")
	public List<LacunaSignerApiFlowActionsFlowActionCreateModel> getAddedFlowActions() {
		return addedFlowActions;
	}

	public void setAddedFlowActions(List<LacunaSignerApiFlowActionsFlowActionCreateModel> addedFlowActions) {
		this.addedFlowActions = addedFlowActions;
	}

	public LacunaSignerApiDocumentsDocumentFlowEditRequest editedFlowActions(List<LacunaSignerApiFlowActionsFlowActionEditModel> editedFlowActions) {
		this.editedFlowActions = editedFlowActions;
		return this;
	}

	public LacunaSignerApiDocumentsDocumentFlowEditRequest addEditedFlowActionsItem(LacunaSignerApiFlowActionsFlowActionEditModel editedFlowActionsItem) {
		if (this.editedFlowActions == null) {
			this.editedFlowActions = new ArrayList<LacunaSignerApiFlowActionsFlowActionEditModel>();
		}
		this.editedFlowActions.add(editedFlowActionsItem);
		return this;
	}

	/**
	 * The existing actions to be modified.  Flow actions that have already been completed or are partially completed cannot be edited.
	 *
	 * @return editedFlowActions
	 **/
	@Schema(description = "The existing actions to be modified.  Flow actions that have already been completed or are partially completed cannot be edited.")
	public List<LacunaSignerApiFlowActionsFlowActionEditModel> getEditedFlowActions() {
		return editedFlowActions;
	}

	public void setEditedFlowActions(List<LacunaSignerApiFlowActionsFlowActionEditModel> editedFlowActions) {
		this.editedFlowActions = editedFlowActions;
	}

	public LacunaSignerApiDocumentsDocumentFlowEditRequest deletedFlowActionIds(List<UUID> deletedFlowActionIds) {
		this.deletedFlowActionIds = deletedFlowActionIds;
		return this;
	}

	public LacunaSignerApiDocumentsDocumentFlowEditRequest addDeletedFlowActionIdsItem(UUID deletedFlowActionIdsItem) {
		if (this.deletedFlowActionIds == null) {
			this.deletedFlowActionIds = new ArrayList<UUID>();
		}
		this.deletedFlowActionIds.add(deletedFlowActionIdsItem);
		return this;
	}

	/**
	 * The Ids of flow actions to be deleted.  Flow actions that have already been completed or are partially completed cannot be deleted.
	 *
	 * @return deletedFlowActionIds
	 **/
	@Schema(description = "The Ids of flow actions to be deleted.  Flow actions that have already been completed or are partially completed cannot be deleted.")
	public List<UUID> getDeletedFlowActionIds() {
		return deletedFlowActionIds;
	}

	public void setDeletedFlowActionIds(List<UUID> deletedFlowActionIds) {
		this.deletedFlowActionIds = deletedFlowActionIds;
	}

	public LacunaSignerApiDocumentsDocumentFlowEditRequest addedObservers(List<LacunaSignerApiObserversObserverCreateModel> addedObservers) {
		this.addedObservers = addedObservers;
		return this;
	}

	public LacunaSignerApiDocumentsDocumentFlowEditRequest addAddedObserversItem(LacunaSignerApiObserversObserverCreateModel addedObserversItem) {
		if (this.addedObservers == null) {
			this.addedObservers = new ArrayList<LacunaSignerApiObserversObserverCreateModel>();
		}
		this.addedObservers.add(addedObserversItem);
		return this;
	}

	/**
	 * The observers to be added to the document.
	 *
	 * @return addedObservers
	 **/
	@Schema(description = "The observers to be added to the document.")
	public List<LacunaSignerApiObserversObserverCreateModel> getAddedObservers() {
		return addedObservers;
	}

	public void setAddedObservers(List<LacunaSignerApiObserversObserverCreateModel> addedObservers) {
		this.addedObservers = addedObservers;
	}

	public LacunaSignerApiDocumentsDocumentFlowEditRequest editedObservers(List<LacunaSignerApiObserversObserverEditModel> editedObservers) {
		this.editedObservers = editedObservers;
		return this;
	}

	public LacunaSignerApiDocumentsDocumentFlowEditRequest addEditedObserversItem(LacunaSignerApiObserversObserverEditModel editedObserversItem) {
		if (this.editedObservers == null) {
			this.editedObservers = new ArrayList<LacunaSignerApiObserversObserverEditModel>();
		}
		this.editedObservers.add(editedObserversItem);
		return this;
	}

	/**
	 * The existing observers to be modified.
	 *
	 * @return editedObservers
	 **/
	@Schema(description = "The existing observers to be modified.")
	public List<LacunaSignerApiObserversObserverEditModel> getEditedObservers() {
		return editedObservers;
	}

	public void setEditedObservers(List<LacunaSignerApiObserversObserverEditModel> editedObservers) {
		this.editedObservers = editedObservers;
	}

	public LacunaSignerApiDocumentsDocumentFlowEditRequest deletedObserverIds(List<UUID> deletedObserverIds) {
		this.deletedObserverIds = deletedObserverIds;
		return this;
	}

	public LacunaSignerApiDocumentsDocumentFlowEditRequest addDeletedObserverIdsItem(UUID deletedObserverIdsItem) {
		if (this.deletedObserverIds == null) {
			this.deletedObserverIds = new ArrayList<UUID>();
		}
		this.deletedObserverIds.add(deletedObserverIdsItem);
		return this;
	}

	/**
	 * The Ids of observers to be deleted.
	 *
	 * @return deletedObserverIds
	 **/
	@Schema(description = "The Ids of observers to be deleted.")
	public List<UUID> getDeletedObserverIds() {
		return deletedObserverIds;
	}

	public void setDeletedObserverIds(List<UUID> deletedObserverIds) {
		this.deletedObserverIds = deletedObserverIds;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		LacunaSignerApiDocumentsDocumentFlowEditRequest lacunaSignerApiDocumentsDocumentFlowEditRequest = (LacunaSignerApiDocumentsDocumentFlowEditRequest) o;
		return Objects.equals(this.addedFlowActions, lacunaSignerApiDocumentsDocumentFlowEditRequest.addedFlowActions) &&
			Objects.equals(this.editedFlowActions, lacunaSignerApiDocumentsDocumentFlowEditRequest.editedFlowActions) &&
			Objects.equals(this.deletedFlowActionIds, lacunaSignerApiDocumentsDocumentFlowEditRequest.deletedFlowActionIds) &&
			Objects.equals(this.addedObservers, lacunaSignerApiDocumentsDocumentFlowEditRequest.addedObservers) &&
			Objects.equals(this.editedObservers, lacunaSignerApiDocumentsDocumentFlowEditRequest.editedObservers) &&
			Objects.equals(this.deletedObserverIds, lacunaSignerApiDocumentsDocumentFlowEditRequest.deletedObserverIds);
	}

	@Override
	public int hashCode() {
		return java.util.Objects.hash(addedFlowActions, editedFlowActions, deletedFlowActionIds, addedObservers, editedObservers, deletedObserverIds);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class LacunaSignerApiDocumentsDocumentFlowEditRequest {\n");

		sb.append("    addedFlowActions: ").append(toIndentedString(addedFlowActions)).append("\n");
		sb.append("    editedFlowActions: ").append(toIndentedString(editedFlowActions)).append("\n");
		sb.append("    deletedFlowActionIds: ").append(toIndentedString(deletedFlowActionIds)).append("\n");
		sb.append("    addedObservers: ").append(toIndentedString(addedObservers)).append("\n");
		sb.append("    editedObservers: ").append(toIndentedString(editedObservers)).append("\n");
		sb.append("    deletedObserverIds: ").append(toIndentedString(deletedObserverIds)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
