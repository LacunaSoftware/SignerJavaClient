/*
 * Dropsigner (HML)
 * <!--------------------------------------------------------------------------------------------------------------------->    <h2>Authentication</h2>    <p>   In order to call this APIs, you will need an <strong>API key</strong>. Set the API key in the header <span class=\"code\">X-Api-Key</span>:  </p>    <pre>X-Api-Key: your-app|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</pre>    <!--------------------------------------------------------------------------------------------------------------------->  <br />    <h2>HTTP Codes</h2>    <p>   The APIs will return the following HTTP codes:  </p>    <table>   <thead>    <tr>     <th>Code</th>     <th>Description</th>    </tr>   </thead>   <tbody>    <tr>     <td><strong class=\"model-title\">200 (OK)</strong></td>     <td>Request processed successfully. The response is different for each API, please refer to the operation's documentation</td>    </tr>    <tr>     <td><strong class=\"model-title\">400 (Bad Request)</strong></td>     <td>Syntax error. For instance, when a required field was not provided</td>    </tr>    <tr>     <td><strong class=\"model-title\">401 (Unauthorized)</strong></td>     <td>API key not provided or invalid</td>    </tr>    <tr>     <td><strong class=\"model-title\">403 (Forbidden)</strong></td>     <td>API key is valid, but the application has insufficient permissions to complete the requested operation</td>    </tr>    <tr>     <td><strong class=\"model-title\">422 (Unprocessable Entity)</strong></td>     <td>API error. The response is as defined in <a href=\"#model-ErrorModel\">ErrorModel</a></td>    </tr>   </tbody>  </table>    <br />    <h3>Error Codes</h3>    <p>Some of the error codes returned in a 422 response are provided bellow*:</p>    <ul>   <li>CertificateNotFound</li>   <li>DocumentNotFound</li>   <li>FolderNotFound</li>   <li>CpfMismatch</li>   <li>CpfNotExpected</li>   <li>InvalidFlowAction</li>   <li>DocumentInvalidKey</li>  </ul>    <p style=\"font-size: 0.9em\">   *The codes shown above are the main error codes. Nonetheless, this list is not comprehensive. New codes may be added anytime without previous warning.  </p>    <!--------------------------------------------------------------------------------------------------------------------->    <br />    <h2>Webhooks</h2>    <p>   It is recomended to subscribe to Webhook events <strong>instead</strong> of polling APIs. To do so, enable webhooks and register an URL that will receive a POST request   whenever one of the events bellow occur.  </p>  <p>   All requests have the format described in <a href=\"#model-Webhooks.WebhookModel\">Webhooks.WebhookModel</a>.   The data field varies according to the webhook event type:  </p>      <table>   <thead>    <tr>     <th>Event type</th>     <th>Description</th>     <th>Payload</th>    </tr>   </thead>   <tbody>    <tr>     <td><strong class=\"model-title\">DocumentSigned</strong></td>     <td>Triggered when a document is signed.</td>     <td><a href=\"#model-Webhooks.DocumentSignedModel\">Webhooks.DocumentSignedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentApproved</strong></td>     <td>Triggered when a document is approved.</td>     <td><a href=\"#model-Webhooks.DocumentApprovedModel\">Webhooks.DocumentApprovedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentRefused</strong></td>     <td>Triggered when a document is refused.</td>     <td><a href=\"#model-Webhooks.DocumentRefusedModel\">Webhooks.DocumentRefusedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentConcluded</strong></td>     <td>Triggered when the flow of a document is concluded.</td>     <td><a href=\"#model-Webhooks.DocumentConcludedModel\">Webhooks.DocumentConcludedModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentCanceled</strong></td>     <td>Triggered when the document is canceled.</td>     <td><a href=\"#model-Webhooks.DocumentCanceledModel\">Webhooks.DocumentCanceledModel</a></td>    </tr>    <tr>     <td><strong class=\"model-title\">DocumentsCreated (v1.50.0)</strong></td>     <td>Triggered when one or more documents are created.</td>     <td><a href=\"#model-Webhooks.DocumentsCreatedModel\">Webhooks.DocumentsCreatedModel</a></td>    </tr>   </tbody>  </table>    <p>   To register your application URL and enable Webhooks, access the integrations section in your <a href=\"/private/organizations\" target=\"_blank\">organization's details page</a>.  </p>  
 *
 * OpenAPI spec version: 1.55.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.lacunasoftware.signer;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.lacunasoftware.signer.certificates.AttributeCertificateInfoModel;
import com.lacunasoftware.signer.signature.EvidencesModel;
import com.lacunasoftware.signer.ValidationResultsModel;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * SignerModel
 */


public class SignerModel {
  @JsonProperty("subjectName")
  private String subjectName = null;

  @JsonProperty("emailAddress")
  private String emailAddress = null;

  @JsonProperty("issuerName")
  private String issuerName = null;

  @JsonProperty("identifier")
  private String identifier = null;

  @JsonProperty("companyName")
  private String companyName = null;

  @JsonProperty("companyIdentifier")
  private String companyIdentifier = null;

  @JsonProperty("isElectronic")
  private Boolean isElectronic = null;

  @JsonProperty("isTimestamp")
  private Boolean isTimestamp = null;

  @JsonProperty("signingTime")
  private OffsetDateTime signingTime = null;

  @JsonProperty("certificateThumbprint")
  private String certificateThumbprint = null;

  @JsonProperty("evidences")
  private EvidencesModel evidences = null;

  @JsonProperty("attributeCertificates")
  private List<AttributeCertificateInfoModel> attributeCertificates = null;

  @JsonProperty("validationResults")
  private ValidationResultsModel validationResults = null;

  public SignerModel subjectName(String subjectName) {
    this.subjectName = subjectName;
    return this;
  }

   /**
   * Get subjectName
   * @return subjectName
  **/
  @Schema(description = "")
  public String getSubjectName() {
    return subjectName;
  }

  public void setSubjectName(String subjectName) {
    this.subjectName = subjectName;
  }

  public SignerModel emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * Get emailAddress
   * @return emailAddress
  **/
  @Schema(description = "")
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }

  public SignerModel issuerName(String issuerName) {
    this.issuerName = issuerName;
    return this;
  }

   /**
   * Get issuerName
   * @return issuerName
  **/
  @Schema(description = "")
  public String getIssuerName() {
    return issuerName;
  }

  public void setIssuerName(String issuerName) {
    this.issuerName = issuerName;
  }

  public SignerModel identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

   /**
   * Get identifier
   * @return identifier
  **/
  @Schema(description = "")
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public SignerModel companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

   /**
   * Get companyName
   * @return companyName
  **/
  @Schema(description = "")
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }

  public SignerModel companyIdentifier(String companyIdentifier) {
    this.companyIdentifier = companyIdentifier;
    return this;
  }

   /**
   * Get companyIdentifier
   * @return companyIdentifier
  **/
  @Schema(description = "")
  public String getCompanyIdentifier() {
    return companyIdentifier;
  }

  public void setCompanyIdentifier(String companyIdentifier) {
    this.companyIdentifier = companyIdentifier;
  }

  public SignerModel isElectronic(Boolean isElectronic) {
    this.isElectronic = isElectronic;
    return this;
  }

   /**
   * Get isElectronic
   * @return isElectronic
  **/
  @Schema(description = "")
  public Boolean isIsElectronic() {
    return isElectronic;
  }

  public void setIsElectronic(Boolean isElectronic) {
    this.isElectronic = isElectronic;
  }

  public SignerModel isTimestamp(Boolean isTimestamp) {
    this.isTimestamp = isTimestamp;
    return this;
  }

   /**
   * Get isTimestamp
   * @return isTimestamp
  **/
  @Schema(description = "")
  public Boolean isIsTimestamp() {
    return isTimestamp;
  }

  public void setIsTimestamp(Boolean isTimestamp) {
    this.isTimestamp = isTimestamp;
  }

  public SignerModel signingTime(OffsetDateTime signingTime) {
    this.signingTime = signingTime;
    return this;
  }

   /**
   * Get signingTime
   * @return signingTime
  **/
  @Schema(description = "")
  public OffsetDateTime getSigningTime() {
    return signingTime;
  }

  public void setSigningTime(OffsetDateTime signingTime) {
    this.signingTime = signingTime;
  }

  public SignerModel certificateThumbprint(String certificateThumbprint) {
    this.certificateThumbprint = certificateThumbprint;
    return this;
  }

   /**
   * Get certificateThumbprint
   * @return certificateThumbprint
  **/
  @Schema(description = "")
  public String getCertificateThumbprint() {
    return certificateThumbprint;
  }

  public void setCertificateThumbprint(String certificateThumbprint) {
    this.certificateThumbprint = certificateThumbprint;
  }

  public SignerModel evidences(EvidencesModel evidences) {
    this.evidences = evidences;
    return this;
  }

   /**
   * Get evidences
   * @return evidences
  **/
  @Schema(description = "")
  public EvidencesModel getEvidences() {
    return evidences;
  }

  public void setEvidences(EvidencesModel evidences) {
    this.evidences = evidences;
  }

  public SignerModel attributeCertificates(List<AttributeCertificateInfoModel> attributeCertificates) {
    this.attributeCertificates = attributeCertificates;
    return this;
  }

  public SignerModel addAttributeCertificatesItem(AttributeCertificateInfoModel attributeCertificatesItem) {
    if (this.attributeCertificates == null) {
      this.attributeCertificates = new ArrayList<AttributeCertificateInfoModel>();
    }
    this.attributeCertificates.add(attributeCertificatesItem);
    return this;
  }

   /**
   * Get attributeCertificates
   * @return attributeCertificates
  **/
  @Schema(description = "")
  public List<AttributeCertificateInfoModel> getAttributeCertificates() {
    return attributeCertificates;
  }

  public void setAttributeCertificates(List<AttributeCertificateInfoModel> attributeCertificates) {
    this.attributeCertificates = attributeCertificates;
  }

  public SignerModel validationResults(ValidationResultsModel validationResults) {
    this.validationResults = validationResults;
    return this;
  }

   /**
   * Get validationResults
   * @return validationResults
  **/
  @Schema(description = "")
  public ValidationResultsModel getValidationResults() {
    return validationResults;
  }

  public void setValidationResults(ValidationResultsModel validationResults) {
    this.validationResults = validationResults;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SignerModel signerModel = (SignerModel) o;
    return Objects.equals(this.subjectName, signerModel.subjectName) &&
        Objects.equals(this.emailAddress, signerModel.emailAddress) &&
        Objects.equals(this.issuerName, signerModel.issuerName) &&
        Objects.equals(this.identifier, signerModel.identifier) &&
        Objects.equals(this.companyName, signerModel.companyName) &&
        Objects.equals(this.companyIdentifier, signerModel.companyIdentifier) &&
        Objects.equals(this.isElectronic, signerModel.isElectronic) &&
        Objects.equals(this.isTimestamp, signerModel.isTimestamp) &&
        Objects.equals(this.signingTime, signerModel.signingTime) &&
        Objects.equals(this.certificateThumbprint, signerModel.certificateThumbprint) &&
        Objects.equals(this.evidences, signerModel.evidences) &&
        Objects.equals(this.attributeCertificates, signerModel.attributeCertificates) &&
        Objects.equals(this.validationResults, signerModel.validationResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subjectName, emailAddress, issuerName, identifier, companyName, companyIdentifier, isElectronic, isTimestamp, signingTime, certificateThumbprint, evidences, attributeCertificates, validationResults);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SignerModel {\n");
    
    sb.append("    subjectName: ").append(toIndentedString(subjectName)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    issuerName: ").append(toIndentedString(issuerName)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    companyIdentifier: ").append(toIndentedString(companyIdentifier)).append("\n");
    sb.append("    isElectronic: ").append(toIndentedString(isElectronic)).append("\n");
    sb.append("    isTimestamp: ").append(toIndentedString(isTimestamp)).append("\n");
    sb.append("    signingTime: ").append(toIndentedString(signingTime)).append("\n");
    sb.append("    certificateThumbprint: ").append(toIndentedString(certificateThumbprint)).append("\n");
    sb.append("    evidences: ").append(toIndentedString(evidences)).append("\n");
    sb.append("    attributeCertificates: ").append(toIndentedString(attributeCertificates)).append("\n");
    sb.append("    validationResults: ").append(toIndentedString(validationResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
