/*
 * Lacuna.Signer.Site API
 * <!--------------------------------------------------------------------------------------------------------------------->  <h2>Authentication</h2>  <p>  In order to call this APIs, you will need an <strong>API key</strong>. Set the API key in the header <span class=\"code\">X-Api-Key</span>: </p>  <pre>X-Api-Key: your-app|xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</pre>  <!---------------------------------------------------------------------------------------------------------------------> <br />  <h2>HTTP Codes</h2>  <p>   The APIs will return the following HTTP codes:  </p>  <table>  <thead>   <tr>     <th>Code</th>     <th>Description</th>    </tr>  </thead>  <tbody>    <tr>     <td><strong class=\"model-title\">200 (OK)</strong></td>     <td>Request processed successfully. The response is different for each API, please refer to the operation's documentation</td>    </tr>    <tr>     <td><strong class=\"model-title\">400 (Bad Request)</strong></td>     <td>Syntax error. For instance, when a required field was not provided</td>    </tr>    <tr>     <td><strong class=\"model-title\">401 (Unauthorized)</strong></td>     <td>API key not provided or invalid</td>    </tr>    <tr>     <td><strong class=\"model-title\">403 (Forbidden)</strong></td>     <td>API key is valid, but the application has insufficient permissions to complete the requested operation</td>    </tr>    <tr>     <td><strong class=\"model-title\">422 (Unprocessable Entity)</strong></td>     <td>API error. The response is as defined in <a href=\"#model-Lacuna.Signer.Api.ErrorModel\">Lacuna.Signer.Api.ErrorModel</a></td>    </tr>   </tbody> </table>  <br />  <h3>Error Codes</h3>  <p>Some of the error codes returned in a 422 response are provided bellow*:</p>  <ul>  <li>CertificateNotFound</li>  <li>DocumentNotFound</li>  <li>FolderNotFound</li>  <li>CpfMismatch</li>  <li>CpfNotExpected</li>  <li>InvalidFlowAction</li>  <li>DocumentInvalidKey</li> </ul>  <p style=\"font-size: 0.9em\">  *The codes shown above are the main error codes. Nonetheless, this list is not comprehensive. New codes may be added anytime without previous warning. </p>  <!--------------------------------------------------------------------------------------------------------------------->  <br />  <h2>Webhooks</h2>  <p>   It is recomended to subscribe to Webhook events <strong>instead</strong> of polling APIs. To do so, enable webhooks and register an URL that will receive a POST request   whenever one of the events bellow occur.  </p> <p>   All requests have the format described in <a href=\"#model-Lacuna.Signer.Api.Webhooks.WebhookModel\">WebhookModel</a>.   The data field varies according to the webhook event type:  </p>   <table>   <thead>    <tr>     <th>Event type</th>     <th>Description</th>     <th>Payload</th>    </tr>   </thead>   <tbody>    <tr>     <td><strong class=\"model-title\">DocumentConcluded</strong></td>     <td>Triggered when the flow of a document is concluded.</td>     <td><a href=\"#model-Lacuna.Signer.Api.Webhooks.DocumentConcludedModel\">DocumentConcludedModel</a></td>    </tr>   </tbody>  </table>  <p>  To register your application URL and enable Webhooks, access the integrations section in your <a href=\"/private/organizations\" target=\"_blank\">organization's details page</a>. </p>
 *
 * OpenAPI spec version: 0.40.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.lacunasoftware.signer;


import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;

import java.io.IOException;


/**
 * LacunaSignerApiFlowActionsXadesOptionsModel
 */

class LacunaSignerApiFlowActionsXadesOptionsModel {
	/**
	 * Gets or Sets signatureType
	 */
	@JsonAdapter(SignatureTypeEnum.Adapter.class)
	public enum SignatureTypeEnum {
		FULLXML("FullXml"),
		XMLELEMENT("XmlElement");

		private String value;

		SignatureTypeEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static SignatureTypeEnum fromValue(String text) {
			for (SignatureTypeEnum b : SignatureTypeEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<SignatureTypeEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final SignatureTypeEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public SignatureTypeEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return SignatureTypeEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("signatureType")
	private SignatureTypeEnum signatureType = null;

	/**
	 * The type of identifier on Lacuna.Signer.Api.FlowActions.XadesOptionsModel.ElementToSignIdentifier.
	 */
	@JsonAdapter(ElementToSignIdentifierTypeEnum.Adapter.class)
	public enum ElementToSignIdentifierTypeEnum {
		ID("Id"),
		XPATH("XPath");

		private String value;

		ElementToSignIdentifierTypeEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static ElementToSignIdentifierTypeEnum fromValue(String text) {
			for (ElementToSignIdentifierTypeEnum b : ElementToSignIdentifierTypeEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<ElementToSignIdentifierTypeEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final ElementToSignIdentifierTypeEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public ElementToSignIdentifierTypeEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return ElementToSignIdentifierTypeEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("elementToSignIdentifierType")
	private ElementToSignIdentifierTypeEnum elementToSignIdentifierType = null;

	@SerializedName("elementToSignIdentifier")
	private String elementToSignIdentifier = null;

	/**
	 * The position which the signature will be inserted, regarding the signed element.
	 */
	@JsonAdapter(InsertionOptionEnum.Adapter.class)
	public enum InsertionOptionEnum {
		APPENDCHILD("AppendChild"),
		PREPENDCHILD("PrependChild"),
		APPENDSIBLING("AppendSibling"),
		PREPENDSIBLING("PrependSibling");

		private String value;

		InsertionOptionEnum(String value) {
			this.value = value;
		}

		public String getValue() {
			return value;
		}

		@Override
		public String toString() {
			return String.valueOf(value);
		}

		public static InsertionOptionEnum fromValue(String text) {
			for (InsertionOptionEnum b : InsertionOptionEnum.values()) {
				if (String.valueOf(b.value).equals(text)) {
					return b;
				}
			}
			return null;
		}

		public static class Adapter extends TypeAdapter<InsertionOptionEnum> {
			@Override
			public void write(final JsonWriter jsonWriter, final InsertionOptionEnum enumeration) throws IOException {
				jsonWriter.value(enumeration.getValue());
			}

			@Override
			public InsertionOptionEnum read(final JsonReader jsonReader) throws IOException {
				String value = jsonReader.nextString();
				return InsertionOptionEnum.fromValue(String.valueOf(value));
			}
		}
	}

	@SerializedName("insertionOption")
	private InsertionOptionEnum insertionOption = null;

	@SerializedName("disableXPathTransformation")
	private Boolean disableXPathTransformation = null;

	public LacunaSignerApiFlowActionsXadesOptionsModel signatureType(SignatureTypeEnum signatureType) {
		this.signatureType = signatureType;
		return this;
	}


	/**
	 * Get signatureType
	 *
	 * @return signatureType
	 **/
	@Schema(description = "")
	public SignatureTypeEnum getSignatureType() {
		return signatureType;
	}

	public void setSignatureType(SignatureTypeEnum signatureType) {
		this.signatureType = signatureType;
	}

	public LacunaSignerApiFlowActionsXadesOptionsModel elementToSignIdentifierType(ElementToSignIdentifierTypeEnum elementToSignIdentifierType) {
		this.elementToSignIdentifierType = elementToSignIdentifierType;
		return this;
	}


	/**
	 * The type of identifier on Lacuna.Signer.Api.FlowActions.XadesOptionsModel.ElementToSignIdentifier.
	 *
	 * @return elementToSignIdentifierType
	 **/
	@Schema(description = "The type of identifier on Lacuna.Signer.Api.FlowActions.XadesOptionsModel.ElementToSignIdentifier.")
	public ElementToSignIdentifierTypeEnum getElementToSignIdentifierType() {
		return elementToSignIdentifierType;
	}

	public void setElementToSignIdentifierType(ElementToSignIdentifierTypeEnum elementToSignIdentifierType) {
		this.elementToSignIdentifierType = elementToSignIdentifierType;
	}

	public LacunaSignerApiFlowActionsXadesOptionsModel elementToSignIdentifier(String elementToSignIdentifier) {
		this.elementToSignIdentifier = elementToSignIdentifier;
		return this;
	}


	/**
	 * A string used to identify the element that should be signed.  If the Lacuna.Signer.Api.FlowActions.XadesOptionsModel.ElementToSignIdentifierType is Lacuna.Signer.Api.XadesElementIdentifierTypes.Id, this string is the Id of the element to be signed.  If the Lacuna.Signer.Api.FlowActions.XadesOptionsModel.ElementToSignIdentifierType is Lacuna.Signer.Api.XadesElementIdentifierTypes.XPath, this string is the XPath to the element to be signed.
	 *
	 * @return elementToSignIdentifier
	 **/
	@Schema(description = "A string used to identify the element that should be signed.  If the Lacuna.Signer.Api.FlowActions.XadesOptionsModel.ElementToSignIdentifierType is Lacuna.Signer.Api.XadesElementIdentifierTypes.Id, this string is the Id of the element to be signed.  If the Lacuna.Signer.Api.FlowActions.XadesOptionsModel.ElementToSignIdentifierType is Lacuna.Signer.Api.XadesElementIdentifierTypes.XPath, this string is the XPath to the element to be signed.")
	public String getElementToSignIdentifier() {
		return elementToSignIdentifier;
	}

	public void setElementToSignIdentifier(String elementToSignIdentifier) {
		this.elementToSignIdentifier = elementToSignIdentifier;
	}

	public LacunaSignerApiFlowActionsXadesOptionsModel insertionOption(InsertionOptionEnum insertionOption) {
		this.insertionOption = insertionOption;
		return this;
	}


	/**
	 * The position which the signature will be inserted, regarding the signed element.
	 *
	 * @return insertionOption
	 **/
	@Schema(description = "The position which the signature will be inserted, regarding the signed element.")
	public InsertionOptionEnum getInsertionOption() {
		return insertionOption;
	}

	public void setInsertionOption(InsertionOptionEnum insertionOption) {
		this.insertionOption = insertionOption;
	}

	public LacunaSignerApiFlowActionsXadesOptionsModel disableXPathTransformation(Boolean disableXPathTransformation) {
		this.disableXPathTransformation = disableXPathTransformation;
		return this;
	}


	/**
	 * By default the XPath transformation is applied in all XAdES signatures. You can set a flow action to not apply the transformation by setting this option to true.  WARNING: If you disable the XPath transformation the signatures might be considered invalid in some validators if the same XML element is signed multiple times.
	 *
	 * @return disableXPathTransformation
	 **/
	@Schema(description = "By default the XPath transformation is applied in all XAdES signatures. You can set a flow action to not apply the transformation by setting this option to true.  WARNING: If you disable the XPath transformation the signatures might be considered invalid in some validators if the same XML element is signed multiple times.")
	public Boolean isDisableXPathTransformation() {
		return disableXPathTransformation;
	}

	public void setDisableXPathTransformation(Boolean disableXPathTransformation) {
		this.disableXPathTransformation = disableXPathTransformation;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		LacunaSignerApiFlowActionsXadesOptionsModel lacunaSignerApiFlowActionsXadesOptionsModel = (LacunaSignerApiFlowActionsXadesOptionsModel) o;
		return Objects.equals(this.signatureType, lacunaSignerApiFlowActionsXadesOptionsModel.signatureType) &&
			Objects.equals(this.elementToSignIdentifierType, lacunaSignerApiFlowActionsXadesOptionsModel.elementToSignIdentifierType) &&
			Objects.equals(this.elementToSignIdentifier, lacunaSignerApiFlowActionsXadesOptionsModel.elementToSignIdentifier) &&
			Objects.equals(this.insertionOption, lacunaSignerApiFlowActionsXadesOptionsModel.insertionOption) &&
			Objects.equals(this.disableXPathTransformation, lacunaSignerApiFlowActionsXadesOptionsModel.disableXPathTransformation);
	}

	@Override
	public int hashCode() {
		return java.util.Objects.hash(signatureType, elementToSignIdentifierType, elementToSignIdentifier, insertionOption, disableXPathTransformation);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class LacunaSignerApiFlowActionsXadesOptionsModel {\n");

		sb.append("    signatureType: ").append(toIndentedString(signatureType)).append("\n");
		sb.append("    elementToSignIdentifierType: ").append(toIndentedString(elementToSignIdentifierType)).append("\n");
		sb.append("    elementToSignIdentifier: ").append(toIndentedString(elementToSignIdentifier)).append("\n");
		sb.append("    insertionOption: ").append(toIndentedString(insertionOption)).append("\n");
		sb.append("    disableXPathTransformation: ").append(toIndentedString(disableXPathTransformation)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

}
