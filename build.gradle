apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = 'com.lacunasoftware.signer'
archivesBaseName = 'signer-client'
version = '2.9.1'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.swagger.core.v3:swagger-annotations:2.1.1'
    implementation 'com.google.code.gson:gson:2.11.0'
    implementation group: 'org.threeten', name: 'threetenbp', version: '1.4.4'

    implementation 'com.fasterxml.jackson.core:jackson-core:2.18.0'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.18.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.0'

    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.12.1'

}

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

sourceSets {
    main.java.srcDirs = ['src/main/java']
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        
            artifactId = "signer-client"
            groupId group
            version version

            pom {
                name = 'signer-client'
                artifactId = 'signer-client'
                description = 'Classes to consume Lacuna Software Signer'
                url = 'https://github.com/LacunaSoftware/SignerJavaClient'

                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }

                scm {
                    connection = 'scm:git:git@github.com:LacunaSoftware/SignerJavaClient.git'
                    developerConnection = 'scm:git:git@github.com:LacunaSoftware/SignerJavaClient.git'
                    url = 'https://github.com/LacunaSoftware/SignerJavaClient'
                }

                developers {
                    developer {
                        id = 'ismaelm'
                        name = 'Ismael Medeiros'
                        email = 'IsmaelM@lacunasoftware.com'
                    }
                    developer {
                        id = "DaniloB"
                        name = "Danilo Bispo"
                        email = "danilob@lacunasoftware.com"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url determineRepositoryUrl()
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

task execute(type:JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'package.Main'
}

def determineRepositoryUrl() {
    def version = project.version.toString()
    if (version.endsWith('SNAPSHOT')) {
        return "https://s01.oss.sonatype.org/content/repositories/snapshots/"
    } else {
        return "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
    }
}

signing {
    sign publishing.publications.mavenJava
    sign configurations.archives
}   

// **New Task for Building a JAR**
task buildJar(type: Jar) {
    archiveBaseName.set(archivesBaseName)
    archiveVersion.set(version)
    from sourceSets.main.output

    // Include dependencies in the JAR
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes(
            'Main-Class': 'com.lacunasoftware.signer.Main'  // Replace with your main class
        )
    }

    // Handle duplicate files gracefully (e.g., LICENSE files)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
